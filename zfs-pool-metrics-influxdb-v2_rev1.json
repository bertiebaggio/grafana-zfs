{
  "__inputs": [
    {
      "name": "DS_INFLUXDB",
      "label": "InfluxDBv2",
      "description": "Uses zpool_influxdb as a data source",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "9.0.7"
    },
    {
      "type": "panel",
      "id": "heatmap",
      "name": "Heatmap",
      "version": ""
    },
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "$$hashKey": "object:1627",
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "Dashboard of metrics generated by Richard Elling's cool \"zpool_influxdb\" utility (included in OpenZFS), version for InfluxDB v2.",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "gnetId": 17350,
  "graphTooltip": 1,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 87,
      "panels": [],
      "title": "Overview for $hostname $poolname",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "smooth",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "Bps"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/Ops/"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "iops"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 9,
        "x": 0,
        "y": 1
      },
      "id": 27,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.2.2",
      "targets": [
        {
          "alias": "$col",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "zpool_stats",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"strings\"\n\nKEEPCOLS = ${TSCOLS}\n\nniceify_legend = ${NICEIFYLEG} // function defined as variable- changes underscores to spaces + title-cases\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_stats\")\n  |> filter(fn: (r) => r[\"name\"] == \"${poolname}\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hostname}\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"read_bytes\" or r[\"_field\"] == \"write_bytes\" or r[\"_field\"] == \"read_ops\" or r[\"_field\"] == \"write_ops\")\n  |> derivative(nonNegative: true)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\n  NamedData = RawData\n    |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:niceify_legend(leg: r[\"_field\"])}))\n    |> keep(columns: KEEPCOLS)\n    |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "write_bytes"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "non_negative_derivative"
              },
              {
                "params": [
                  "Write Bytes"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "read_bytes"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "non_negative_derivative"
              },
              {
                "params": [
                  "Read Bytes"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "write_ops"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "non_negative_derivative"
              },
              {
                "params": [
                  "Write Ops"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "read_ops"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "non_negative_derivative"
              },
              {
                "params": [
                  "Read Ops"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "host",
              "operator": "=~",
              "value": "/^$hostname$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=~",
              "value": "/^$poolname$/"
            }
          ]
        }
      ],
      "title": "Pool Activity ($poolname)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-blue",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 9,
        "y": 1
      },
      "id": 32,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "/^state$/",
          "values": false
        },
        "text": {},
        "textMode": "value"
      },
      "pluginVersion": "9.0.7",
      "targets": [
        {
          "alias": "$tag_state",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "state"
              ],
              "type": "tag"
            },
            {
              "params": [
                "state"
              ],
              "type": "tag"
            }
          ],
          "hide": false,
          "measurement": "zpool_stats",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"strings\"\n\nKEEPCOLS = [\"_field\", \"_time\", \"_value\", \"state\"]\n\nniceify_legend = ${NICEIFYLEG} // function defined as variable- changes underscores to spaces + title-cases\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_stats\")\n  |> filter(fn: (r) => r[\"name\"] == \"${poolname}\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hostname}\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"size\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> last()\n\n  NamedData = RawData\n    //|> map(fn: (r) => ({_value:r._value, _time:r._time, _field:niceify_legend(leg: r[\"_field\"]), state: r[\"state\"]}))\n    |> map(fn: (r) => ({r: r._time, c: \"state\", v: r[\"state\"]}))\n    |> pivot(rowKey: [\"r\"], columnKey: [\"c\"], valueColumn: \"v\")\n    //|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n    //|> keep(columns: KEEPCOLS)\n    |> yield(name: \"mean\")\n\n",
          "refId": "B",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "size"
                ],
                "type": "field"
              }
            ]
          ],
          "tags": [
            {
              "key": "host",
              "operator": "=~",
              "value": "/^$hostname$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=~",
              "value": "/^$poolname$/"
            }
          ]
        }
      ],
      "title": "$poolname Pool Status",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "depth",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 50,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "stepAfter",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 10,
        "x": 14,
        "y": 1
      },
      "id": 29,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "$col",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "zpool_vdev_stats",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"strings\"\n\nKEEPCOLS = ${TSCOLS}\n\nniceify_legend = ${NICEIFYLEG} // function defined as variable- changes underscores to spaces + title-cases\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_vdev_stats\")\n  |> filter(fn: (r) => r[\"name\"] == \"${poolname}\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hostname}\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"sync_w_active_queue\" or r[\"_field\"] == \"sync_r_active_queue\" or r[\"_field\"] == \"async_scrub_active_queue\" or r[\"_field\"] == \"async_w_active_queue\" or r[\"_field\"] == \"async_r_active_queue\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\n  NamedData = RawData\n    |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:niceify_legend(leg: r[\"_field\"])}))\n    |> keep(columns: KEEPCOLS)\n    |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "sync_w_active_queue"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              },
              {
                "params": [
                  "Sync Write"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "sync_r_active_queue"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              },
              {
                "params": [
                  "Sync Read"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "async_scrub_active_queue"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              },
              {
                "params": [
                  "Async Scrub"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "async_w_active_queue"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              },
              {
                "params": [
                  "Async Write"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "async_r_active_queue"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              },
              {
                "params": [
                  "Async Read"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "host",
              "operator": "=~",
              "value": "/^$hostname$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=~",
              "value": "/^$poolname$/"
            }
          ]
        }
      ],
      "title": "vdev I/O Active Queues ($poolname)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-red",
                "value": null
              }
            ]
          },
          "unit": "short"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Fragmentation"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 9,
        "y": 3
      },
      "id": 57,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "value_and_name"
      },
      "pluginVersion": "9.0.7",
      "targets": [
        {
          "alias": "$col",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "zpool_stats",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"strings\"\n\nKEEPCOLS = ${TSCOLS}\n\nniceify_legend = ${NICEIFYLEG} // function defined as variable- changes underscores to spaces + title-cases\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_stats\")\n  |> filter(fn: (r) => r[\"name\"] == \"${poolname}\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hostname}\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"read_errors\" or r[\"_field\"] == \"write_errors\" or r[\"_field\"] == \"fragmentation\" or r[\"_field\"] == \"checksum_errors\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> last()\n  \n\n  NamedData = RawData\n    |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:niceify_legend(leg: r[\"_field\"])}))\n    |> keep(columns: KEEPCOLS)\n    |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "read_errors"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Read Errors"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "write_errors"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Write Errors"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "fragmentation"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Fragmentation"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "checksum_errors"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Checksum Errors"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "host",
              "operator": "=~",
              "value": "/^$hostname$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=~",
              "value": "/^$poolname$/"
            },
            {
              "condition": "AND",
              "key": "vdev",
              "operator": "=",
              "value": "root"
            }
          ]
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-blue",
                "value": null
              }
            ]
          },
          "unit": "decbytes"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Fragmentation"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Checksum Errors"
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 5,
        "x": 9,
        "y": 8
      },
      "id": 55,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "value_and_name"
      },
      "pluginVersion": "9.0.7",
      "targets": [
        {
          "alias": "$col",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "zpool_stats",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"strings\"\n\nKEEPCOLS = ${TSCOLS}\n\nniceify_legend = ${NICEIFYLEG} // function defined as variable- changes underscores to spaces + title-cases\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_stats\")\n  |> filter(fn: (r) => r[\"name\"] == \"${poolname}\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hostname}\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"alloc\" or r[\"_field\"] == \"free\" or r[\"_field\"] == \"size\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> last()\n\n  NamedData = RawData\n    |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:niceify_legend(leg: r[\"_field\"])}))\n    |> keep(columns: KEEPCOLS)\n    |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "alloc"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Alloc"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "free"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Free"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "size"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Size"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "host",
              "operator": "=~",
              "value": "/^$hostname$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=~",
              "value": "/^$poolname$/"
            },
            {
              "condition": "AND",
              "key": "vdev",
              "operator": "=",
              "value": "root"
            }
          ]
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "depth",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "stepAfter",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 10,
        "x": 14,
        "y": 8
      },
      "id": 30,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "$col",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "zpool_vdev_stats",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"strings\"\n\nKEEPCOLS = ${TSCOLS}\n\nniceify_legend = ${NICEIFYLEG} // function defined as variable- changes underscores to spaces + title-cases\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_vdev_stats\")\n  |> filter(fn: (r) => r[\"name\"] == \"${poolname}\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hostname}\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"sync_w_pend_queue\" or r[\"_field\"] == \"sync_r_pend_queue\" or r[\"_field\"] == \"async_scrub_pend_queue\" or r[\"_field\"] == \"async_w_pend_queue\" or r[\"_field\"] == \"async_r_pend_queue\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\n  NamedData = RawData\n    |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:niceify_legend(leg: r[\"_field\"])}))\n    |> keep(columns: KEEPCOLS)\n    |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "sync_w_pend_queue"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              },
              {
                "params": [
                  "Sync Write"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "sync_r_pend_queue"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              },
              {
                "params": [
                  "Sync Read"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "async_scrub_pend_queue"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              },
              {
                "params": [
                  "Async Scrub"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "async_w_pend_queue"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              },
              {
                "params": [
                  "Async Write"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "async_r_pend_queue"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              },
              {
                "params": [
                  "Async Read"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "host",
              "operator": "=~",
              "value": "/^$hostname$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=~",
              "value": "/^$poolname$/"
            }
          ]
        }
      ],
      "title": "vdev I/O Pending Queues ($poolname)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "decbytes"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Fragmentation"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 9,
        "x": 0,
        "y": 9
      },
      "id": 25,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "$col",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "zpool_stats",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"strings\"\n\nKEEPCOLS = ${TSCOLS}\n\nniceify_legend = ${NICEIFYLEG} // function defined as variable- changes underscores to spaces + title-cases\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_stats\")\n  |> filter(fn: (r) => r[\"name\"] == \"${poolname}\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hostname}\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"alloc\" or r[\"_field\"] == \"size\" or r[\"_field\"] == \"free\" or r[\"_field\"] == \"fragmentation\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\n  NamedData = RawData\n    |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:niceify_legend(leg: r[\"_field\"])}))\n    |> keep(columns: KEEPCOLS)\n    |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "alloc"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "Allocated"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "size"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "Size"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "free"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              },
              {
                "params": [
                  "Free"
                ],
                "type": "alias"
              }
            ],
            [
              {
                "params": [
                  "fragmentation"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "Fragmentation"
                ],
                "type": "alias"
              }
            ]
          ],
          "tags": [
            {
              "key": "host",
              "operator": "=~",
              "value": "/^$hostname$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=~",
              "value": "/^$poolname$/"
            },
            {
              "condition": "AND",
              "key": "vdev",
              "operator": "=",
              "value": "root"
            }
          ]
        }
      ],
      "title": "Pool Usage ($poolname)",
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "datasource": {
        "type": "influxdb",
        "uid": "y2F-575nk"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 15
      },
      "id": 5,
      "panels": [],
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "y2F-575nk"
          },
          "refId": "A"
        }
      ],
      "title": "Latencies",
      "type": "row"
    },
    {
      "cards": {
        "cardPadding": 1,
        "cardRound": 0
      },
      "color": {
        "cardColor": "#8AB8FF",
        "colorScale": "sqrt",
        "colorScheme": "interpolateGreens",
        "exponent": 0.5,
        "mode": "spectrum"
      },
      "dataFormat": "tsbuckets",
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "Latency histogram for the total reads of a ZFS pool",
      "gridPos": {
        "h": 8,
        "w": 13,
        "x": 0,
        "y": 16
      },
      "heatmap": {},
      "hideZeroBuckets": true,
      "highlightCards": true,
      "id": 2,
      "legend": {
        "show": true
      },
      "reverseYBuckets": false,
      "targets": [
        {
          "alias": "$tag_le",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "le"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "zpool_latency",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "KEEPCOLS = ${HMCOLS}\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_latency\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"total_read\") |> derivative(nonNegative: true)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\nNamedData = RawData\n  |> keep(columns: KEEPCOLS)\n  |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "total_read"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "non_negative_derivative"
              }
            ]
          ],
          "tags": [
            {
              "key": "host",
              "operator": "=~",
              "value": "/^$hostname$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=~",
              "value": "/^$poolname$/"
            },
            {
              "condition": "AND",
              "key": "vdev",
              "operator": "=",
              "value": "root"
            }
          ]
        }
      ],
      "title": "Total Reads (rate)",
      "tooltip": {
        "show": true,
        "showHistogram": false
      },
      "transformations": [],
      "type": "heatmap",
      "xAxis": {
        "show": true
      },
      "yAxis": {
        "decimals": 0,
        "format": "s",
        "logBase": 1,
        "show": true
      },
      "yBucketBound": "auto"
    },
    {
      "cards": {},
      "color": {
        "cardColor": "#b4ff00",
        "colorScale": "sqrt",
        "colorScheme": "interpolateOranges",
        "exponent": 0.5,
        "mode": "spectrum"
      },
      "dataFormat": "tsbuckets",
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "Latency histogram for the total writes of a ZFS pool",
      "gridPos": {
        "h": 8,
        "w": 11,
        "x": 13,
        "y": 16
      },
      "heatmap": {},
      "hideZeroBuckets": true,
      "highlightCards": true,
      "id": 3,
      "legend": {
        "show": true
      },
      "reverseYBuckets": false,
      "targets": [
        {
          "alias": "$tag_le",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "le"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "zpool_latency",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "KEEPCOLS = ${HMCOLS}\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_latency\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"total_write\") |> derivative(nonNegative: true)\n  |> drop(columns: [\"_start\", \"_stop\", \"host\", \"name\", \"vdev\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\nNamedData = RawData\n  |> keep(columns: KEEPCOLS)\n  |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "total_write"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "non_negative_derivative"
              }
            ]
          ],
          "tags": [
            {
              "key": "host",
              "operator": "=~",
              "value": "/^$hostname$/"
            },
            {
              "condition": "AND",
              "key": "name",
              "operator": "=~",
              "value": "/^$poolname$/"
            },
            {
              "condition": "AND",
              "key": "vdev",
              "operator": "=",
              "value": "root"
            }
          ]
        }
      ],
      "title": "Total Writes (rate)",
      "tooltip": {
        "show": true,
        "showHistogram": true
      },
      "type": "heatmap",
      "xAxis": {
        "show": true
      },
      "yAxis": {
        "decimals": 0,
        "format": "s",
        "logBase": 1,
        "show": true
      },
      "yBucketBound": "auto"
    },
    {
      "cards": {},
      "color": {
        "cardColor": "#b4ff00",
        "colorScale": "sqrt",
        "colorScheme": "interpolateGreens",
        "exponent": 0.5,
        "mode": "spectrum"
      },
      "dataFormat": "tsbuckets",
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "Latency histogram for $latencyparams of pool $poolname",
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 0,
        "y": 24
      },
      "heatmap": {},
      "hideZeroBuckets": true,
      "highlightCards": true,
      "id": 101,
      "legend": {
        "show": false
      },
      "repeat": "latencyparams",
      "repeatDirection": "h",
      "reverseYBuckets": false,
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "query": "KEEPCOLS = ${HMCOLS}\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_latency\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hostname}\")\n  |> filter(fn: (r) => r[\"name\"] == \"${poolname}\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"${latencyparams}\") |> derivative(nonNegative: true)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\nNamedData = RawData\n  |> keep(columns: KEEPCOLS)\n  |> yield()",
          "refId": "A"
        }
      ],
      "title": "Queue $latencyparams Latency Rate",
      "tooltip": {
        "show": true,
        "showHistogram": false
      },
      "transparent": true,
      "type": "heatmap",
      "xAxis": {
        "show": true
      },
      "yAxis": {
        "decimals": 0,
        "format": "s",
        "logBase": 1,
        "show": true
      },
      "yBucketBound": "auto"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 40
      },
      "id": 66,
      "panels": [
        {
          "cards": {},
          "color": {
            "cardColor": "#b4ff00",
            "colorScale": "sqrt",
            "colorScheme": "interpolateGreens",
            "exponent": 0.5,
            "mode": "spectrum"
          },
          "dataFormat": "tsbuckets",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "description": "$indagg I/O Sizes - $ioparams",
          "gridPos": {
            "h": 10,
            "w": 8,
            "x": 0,
            "y": 41
          },
          "heatmap": {},
          "hideZeroBuckets": true,
          "highlightCards": true,
          "id": 59,
          "legend": {
            "show": true
          },
          "maxPerRow": 3,
          "repeat": "ioparams",
          "repeatDirection": "h",
          "reverseYBuckets": false,
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "${DS_INFLUXDB}"
              },
              "query": "KEEPCOLS = ${HMCOLS}\n\nRawData = from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_io_size\")\n  |> filter(fn: (r) => r[\"vdev\"] == \"root\")\n  |> filter(fn: (r) => r[\"_field\"] == \"${ioparams}_${indagg}\") |> derivative(nonNegative: true)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\nNamedData = RawData\n  |> keep(columns: KEEPCOLS)\n  |> yield()",
              "refId": "A"
            }
          ],
          "title": "ZFS IO - ${ioparams}_${indagg}",
          "tooltip": {
            "show": true,
            "showHistogram": false
          },
          "transparent": true,
          "type": "heatmap",
          "xAxis": {
            "show": true
          },
          "yAxis": {
            "decimals": 0,
            "format": "decbytes",
            "logBase": 1,
            "show": true
          },
          "yBucketBound": "auto"
        }
      ],
      "repeat": "indagg",
      "repeatDirection": "h",
      "title": "I/O Sizes ($indagg)",
      "type": "row"
    }
  ],
  "refresh": "",
  "schemaVersion": 36,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB}"
        },
        "definition": "buckets()",
        "description": "bucket where zpool_influxdb data is stored",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "bucket",
        "options": [],
        "query": "buckets()",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB}"
        },
        "definition": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_stats\")\n  |> keep(columns: [\"host\"])\n  |> unique(column: \"host\")\n  |> map(fn: (r) => ({_value: r[\"host\"]}))\n  |> yield(name: \"mean\")",
        "description": "filter by host",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "hostname",
        "options": [],
        "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_stats\")\n  |> keep(columns: [\"host\"])\n  |> unique(column: \"host\")\n  |> map(fn: (r) => ({_value: r[\"host\"]}))\n  |> yield(name: \"mean\")",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 5,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB}"
        },
        "definition": "  from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_stats\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hostname}\")\n  |> keep(columns: [\"name\"])\n  |> unique(column: \"name\")\n  |> map(fn: (r) => ({_value: r[\"name\"]}))\n  |> yield(name: \"mean\")",
        "description": "filter by pool",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "poolname",
        "options": [],
        "query": "  from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"zpool_stats\")\n  |> filter(fn: (r) => r[\"host\"] == \"${hostname}\")\n  |> keep(columns: [\"name\"])\n  |> unique(column: \"name\")\n  |> map(fn: (r) => ({_value: r[\"name\"]}))\n  |> yield(name: \"mean\")",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 5,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": "",
        "current": {
          "selected": true,
          "text": [
            "async_read_ind"
          ],
          "value": [
            "async_read_ind"
          ]
        },
        "description": "zpool_io_size parameters to create histograms for (recommended: all)",
        "hide": 0,
        "includeAll": true,
        "label": "i/O Parameters",
        "multi": true,
        "name": "ioparams",
        "options": [
          {
            "selected": true,
            "text": "All",
            "value": "$__all"
          },
          {
            "selected": false,
            "text": "async_read",
            "value": "async_read"
          },
          {
            "selected": false,
            "text": "sync_read",
            "value": "sync_read"
          },
          {
            "selected": false,
            "text": "scrub_read",
            "value": "scrub_read"
          },
          {
            "selected": false,
            "text": "async_write",
            "value": "async_write"
          },
          {
            "selected": false,
            "text": "sync_write",
            "value": "sync_write"
          },
          {
            "selected": false,
            "text": "trim_write",
            "value": "trim_write"
          }
        ],
        "query": "async_read, sync_read, scrub_read, async_write,  sync_write, trim_write",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "allValue": "",
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "description": "individual or aggregate metrics (recommended: all)",
        "hide": 0,
        "includeAll": true,
        "label": "Individual / Aggregate",
        "multi": true,
        "name": "indagg",
        "options": [
          {
            "selected": true,
            "text": "All",
            "value": "$__all"
          },
          {
            "selected": false,
            "text": "ind",
            "value": "ind"
          },
          {
            "selected": false,
            "text": "agg",
            "value": "agg"
          }
        ],
        "query": "ind,agg",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "allValue": "",
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "description": "Latency parameters to show histograms for selected pool (recommended: all)",
        "hide": 0,
        "includeAll": true,
        "label": "Latency Parameters",
        "multi": true,
        "name": "latencyparams",
        "options": [
          {
            "selected": true,
            "text": "All",
            "value": "$__all"
          },
          {
            "selected": false,
            "text": "sync_read",
            "value": "sync_read"
          },
          {
            "selected": false,
            "text": "async_read",
            "value": "async_read"
          },
          {
            "selected": false,
            "text": "scrub",
            "value": "scrub"
          },
          {
            "selected": false,
            "text": "disk_read",
            "value": "disk_read"
          },
          {
            "selected": false,
            "text": "sync_write",
            "value": "sync_write"
          },
          {
            "selected": false,
            "text": "async_write",
            "value": "async_write"
          },
          {
            "selected": false,
            "text": "trim",
            "value": "trim"
          },
          {
            "selected": false,
            "text": "disk_write",
            "value": "disk_write"
          }
        ],
        "query": "sync_read,async_read,scrub,disk_read,sync_write,async_write,trim,disk_write",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "[\"_field\", \"_time\", \"_value\"]",
          "value": "[\"_field\", \"_time\", \"_value\"]"
        },
        "hide": 2,
        "includeAll": false,
        "label": "Time series columns to retain",
        "multi": false,
        "name": "TSCOLS",
        "options": [
          {
            "selected": true,
            "text": "[\"_field\", \"_time\", \"_value\"]",
            "value": "[\"_field\", \"_time\", \"_value\"]"
          }
        ],
        "query": "[\"_field\"\\, \"_time\"\\, \"_value\"]",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "[\"_time\", \"_value\", \"le\"]",
          "value": "[\"_time\", \"_value\", \"le\"]"
        },
        "description": "Columns to retain in heatmaps",
        "hide": 2,
        "includeAll": false,
        "label": "Heatmap columns",
        "multi": false,
        "name": "HMCOLS",
        "options": [
          {
            "selected": true,
            "text": "[\"_time\", \"_value\", \"le\"]",
            "value": "[\"_time\", \"_value\", \"le\"]"
          }
        ],
        "query": "[\"_time\"\\, \"_value\"\\, \"le\"]",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "(leg) => strings.title(v: strings.replaceAll(v:leg, t: \"_\", u: \" \"))",
          "value": "(leg) => strings.title(v: strings.replaceAll(v:leg, t: \"_\", u: \" \"))"
        },
        "description": "Function used in queries to replace underscores with spaces and then title case the result",
        "hide": 2,
        "includeAll": false,
        "label": "Niceify Legend",
        "multi": false,
        "name": "NICEIFYLEG",
        "options": [
          {
            "selected": true,
            "text": "(leg) => strings.title(v: strings.replaceAll(v:leg, t: \"_\", u: \" \"))",
            "value": "(leg) => strings.title(v: strings.replaceAll(v:leg, t: \"_\", u: \" \"))"
          }
        ],
        "query": "(leg) => strings.title(v: strings.replaceAll(v:leg\\, t: \"_\"\\, u: \" \"))",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-1h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "ZFS Pool Metrics (InfluxDBv2)",
  "uid": "lj--ccG4z",
  "version": 12,
  "weekStart": ""
}